// src/tpl/mock4tpl-prefix.js
/*
    Mock4Tpl - 基于客户端模板生成模拟数据

    https://github.com/nuysoft/Mock
    墨智 mozhi.gyy@taobao.com nuysoft@gmail.com
*/
(function(undefined) {
    var Mock4Tpl = {
        VERSION: '0.0.1',
    }
    var Random = Mock.Random
    var Util = Mock.Util

// src/tpl/parser.js



/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"statements":4,"EOF":5,"program":6,"simpleInverse":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"CLOSE_UNESCAPED":24,"OPEN_PARTIAL":25,"partialName":26,"partial_option0":27,"inMustache_repetition0":28,"inMustache_option0":29,"dataName":30,"param":31,"STRING":32,"INTEGER":33,"BOOLEAN":34,"hash":35,"hash_repetition_plus0":36,"hashSegment":37,"ID":38,"EQUALS":39,"DATA":40,"pathSegments":41,"SEP":42,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",32:"STRING",33:"INTEGER",34:"BOOLEAN",38:"ID",39:"EQUALS",40:"DATA",42:"SEP"},
productions_: [0,[3,2],[6,2],[6,3],[6,2],[6,1],[6,1],[6,0],[4,1],[4,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,4],[7,2],[17,3],[17,1],[31,1],[31,1],[31,1],[31,1],[31,1],[35,1],[37,3],[26,1],[26,1],[26,1],[30,2],[21,1],[41,3],[41,1],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[36,1],[36,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new yy.ProgramNode($$[$0-1]); 
break;
case 2:this.$ = new yy.ProgramNode([], $$[$0]);
break;
case 3:this.$ = new yy.ProgramNode($$[$0-2], $$[$0]);
break;
case 4:this.$ = new yy.ProgramNode($$[$0-1], []);
break;
case 5:this.$ = new yy.ProgramNode($$[$0]);
break;
case 6:this.$ = new yy.ProgramNode([]);
break;
case 7:this.$ = new yy.ProgramNode([]);
break;
case 8:this.$ = [$$[$0]];
break;
case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 10:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]);
break;
case 11:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]);
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = new yy.ContentNode($$[$0]);
break;
case 15:this.$ = new yy.CommentNode($$[$0]);
break;
case 16:this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 17:this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 18:this.$ = $$[$0-1];
break;
case 19:
    // Parsing out the '&' escape token at this level saves ~500 bytes after min due to the removal of one parser node.
    this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], $$[$0-2][2] === '&');
  
break;
case 20:this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true);
break;
case 21:this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]);
break;
case 22: 
break;
case 23:this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]];
break;
case 24:this.$ = [[$$[$0]], null];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = new yy.StringNode($$[$0]);
break;
case 27:this.$ = new yy.IntegerNode($$[$0]);
break;
case 28:this.$ = new yy.BooleanNode($$[$0]);
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = new yy.HashNode($$[$0]);
break;
case 31:this.$ = [$$[$0-2], $$[$0]];
break;
case 32:this.$ = new yy.PartialNameNode($$[$0]);
break;
case 33:this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0]));
break;
case 34:this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0]));
break;
case 35:this.$ = new yy.DataNode($$[$0]);
break;
case 36:this.$ = new yy.IdNode($$[$0]);
break;
case 37: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
break;
case 38:this.$ = [{part: $$[$0]}];
break;
case 41:this.$ = [];
break;
case 42:$$[$0-1].push($$[$0]);
break;
case 45:this.$ = [$$[$0]];
break;
case 46:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,8:3,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,10],22:[1,12],23:[1,13],25:[1,14]},{1:[3]},{5:[1,15],8:16,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,10],22:[1,12],23:[1,13],25:[1,14]},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],25:[2,8]},{4:19,6:17,7:18,8:3,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,20],20:[2,7],22:[1,12],23:[1,13],25:[1,14]},{4:19,6:21,7:18,8:3,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,20],20:[2,7],22:[1,12],23:[1,13],25:[1,14]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{17:22,21:23,30:24,38:[1,27],40:[1,26],41:25},{17:28,21:23,30:24,38:[1,27],40:[1,26],41:25},{17:29,21:23,30:24,38:[1,27],40:[1,26],41:25},{17:30,21:23,30:24,38:[1,27],40:[1,26],41:25},{21:32,26:31,32:[1,33],33:[1,34],38:[1,27],41:25},{1:[2,1]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{10:35,20:[1,36]},{4:37,8:3,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,10],20:[2,6],22:[1,12],23:[1,13],25:[1,14]},{7:38,8:16,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,20],20:[2,5],22:[1,12],23:[1,13],25:[1,14]},{17:22,18:[1,39],21:23,30:24,38:[1,27],40:[1,26],41:25},{10:40,20:[1,36]},{18:[1,41]},{18:[2,41],24:[2,41],28:42,32:[2,41],33:[2,41],34:[2,41],38:[2,41],40:[2,41]},{18:[2,24],24:[2,24]},{18:[2,36],24:[2,36],32:[2,36],33:[2,36],34:[2,36],38:[2,36],40:[2,36],42:[1,43]},{21:44,38:[1,27],41:25},{18:[2,38],24:[2,38],32:[2,38],33:[2,38],34:[2,38],38:[2,38],40:[2,38],42:[2,38]},{18:[1,45]},{18:[1,46]},{24:[1,47]},{18:[2,39],21:49,27:48,38:[1,27],41:25},{18:[2,32],38:[2,32]},{18:[2,33],38:[2,33]},{18:[2,34],38:[2,34]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{21:50,38:[1,27],41:25},{8:16,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,10],20:[2,2],22:[1,12],23:[1,13],25:[1,14]},{4:51,8:3,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,10],20:[2,4],22:[1,12],23:[1,13],25:[1,14]},{14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{18:[2,43],21:55,24:[2,43],29:52,30:59,31:53,32:[1,56],33:[1,57],34:[1,58],35:54,36:60,37:61,38:[1,62],40:[1,26],41:25},{38:[1,63]},{18:[2,35],24:[2,35],32:[2,35],33:[2,35],34:[2,35],38:[2,35],40:[2,35]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{18:[1,64]},{18:[2,40]},{18:[1,65]},{8:16,9:4,11:5,12:6,13:7,14:[1,8],15:[1,9],16:[1,11],19:[1,10],20:[2,3],22:[1,12],23:[1,13],25:[1,14]},{18:[2,23],24:[2,23]},{18:[2,42],24:[2,42],32:[2,42],33:[2,42],34:[2,42],38:[2,42],40:[2,42]},{18:[2,44],24:[2,44]},{18:[2,25],24:[2,25],32:[2,25],33:[2,25],34:[2,25],38:[2,25],40:[2,25]},{18:[2,26],24:[2,26],32:[2,26],33:[2,26],34:[2,26],38:[2,26],40:[2,26]},{18:[2,27],24:[2,27],32:[2,27],33:[2,27],34:[2,27],38:[2,27],40:[2,27]},{18:[2,28],24:[2,28],32:[2,28],33:[2,28],34:[2,28],38:[2,28],40:[2,28]},{18:[2,29],24:[2,29],32:[2,29],33:[2,29],34:[2,29],38:[2,29],40:[2,29]},{18:[2,30],24:[2,30],37:66,38:[1,67]},{18:[2,45],24:[2,45],38:[2,45]},{18:[2,38],24:[2,38],32:[2,38],33:[2,38],34:[2,38],38:[2,38],39:[1,68],40:[2,38],42:[2,38]},{18:[2,37],24:[2,37],32:[2,37],33:[2,37],34:[2,37],38:[2,37],40:[2,37],42:[2,37]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]},{18:[2,46],24:[2,46],38:[2,46]},{39:[1,68]},{21:55,30:59,31:69,32:[1,56],33:[1,57],34:[1,58],38:[1,27],40:[1,26],41:25},{18:[2,31],24:[2,31],38:[2,31]}],
defaultActions: {15:[2,1],49:[2,40]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {


function strip(start, end) {
  return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:yy_.yytext = "\\"; return 14;
break;
case 1:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") strip(0,1), this.begin("emu");
                                   if(yy_.yytext) return 14;
                                 
break;
case 2:return 14;
break;
case 3:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") strip(0,1);
                                   return 14;
                                 
break;
case 4:strip(0,4); this.popState(); return 15;
break;
case 5:return 25;
break;
case 6:return 16;
break;
case 7:return 20;
break;
case 8:return 19;
break;
case 9:return 19;
break;
case 10:return 23;
break;
case 11:return 22;
break;
case 12:this.popState(); this.begin('com');
break;
case 13:strip(3,5); this.popState(); return 15;
break;
case 14:return 22;
break;
case 15:return 39;
break;
case 16:return 38;
break;
case 17:return 38;
break;
case 18:return 42;
break;
case 19:/*ignore whitespace*/
break;
case 20:this.popState(); return 24;
break;
case 21:this.popState(); return 18;
break;
case 22:yy_.yytext = strip(1,2).replace(/\\"/g,'"'); return 32;
break;
case 23:yy_.yytext = strip(1,2).replace(/\\'/g,"'"); return 32;
break;
case 24:return 40;
break;
case 25:return 34;
break;
case 26:return 34;
break;
case 27:return 33;
break;
case 28:return 38;
break;
case 29:yy_.yytext = strip(1,2); return 38;
break;
case 30:return 'INVALID';
break;
case 31:return 5;
break;
}
},
rules: [/^(?:\\\\(?=(\{\{)))/,/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[}\/ ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:-?[0-9]+(?=[}\s]))/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/],
conditions: {"mu":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":false},"emu":{"rules":[3],"inclusive":false},"com":{"rules":[4],"inclusive":false},"INITIAL":{"rules":[0,1,2,31],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

var AST = {};

AST.ProgramNode = function(statements, inverse) {
  this.type = "program";
  this.statements = statements;
  if (inverse) {
    this.inverse = new AST.ProgramNode(inverse);
  }
};

AST.MustacheNode = function(rawParams, hash, unescaped) {
  this.type = "mustache";
  this.escaped = !unescaped;
  this.hash = hash;

  var id = this.id = rawParams[0];
  var params = this.params = rawParams.slice(1);

  // a mustache is an eligible helper if:
  // * its id is simple (a single part, not `this` or `..`)
  var eligibleHelper = this.eligibleHelper = id.isSimple;

  // a mustache is definitely a helper if:
  // * it is an eligible helper, and
  // * it has at least one parameter or hash segment
  this.isHelper = eligibleHelper && (params.length || hash);

  // if a mustache is an eligible helper but not a definite
  // helper, it is ambiguous, and will be resolved in a later
  // pass or at runtime.
};

AST.PartialNode = function(partialName, context) {
  this.type = "partial";
  this.partialName = partialName;
  this.context = context;
};

AST.BlockNode = function(mustache, program, inverse, close) {
  if (mustache.id.original !== close.original) {
    throw new Exception(mustache.id.original + " doesn't match " + close.original);
  }

  this.type = "block";
  this.mustache = mustache;
  this.program = program;
  this.inverse = inverse;

  if (this.inverse && !this.program) {
    this.isInverse = true;
  }
};

AST.ContentNode = function(string) {
  this.type = "content";
  this.string = string;
};

AST.HashNode = function(pairs) {
  this.type = "hash";
  this.pairs = pairs;
};

AST.IdNode = function(parts) {
  this.type = "ID";

  var original = "",
    dig = [],
    depth = 0;

  for (var i = 0, l = parts.length; i < l; i++) {
    var part = parts[i].part;
    original += (parts[i].separator || '') + part;

    if (part === ".." || part === "." || part === "this") {
      if (dig.length > 0) {
        throw new Exception("Invalid path: " + original);
      } else if (part === "..") {
        depth++;
      } else {
        this.isScoped = true;
      }
    } else {
      dig.push(part);
    }
  }

  this.original = original;
  this.parts = dig;
  this.string = dig.join('.');
  this.depth = depth;

  // an ID is simple if it only has one part, and that part is not
  // `..` or `this`.
  this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

  this.stringModeValue = this.string;
};

AST.PartialNameNode = function(name) {
  this.type = "PARTIAL_NAME";
  this.name = name.original;
};

AST.DataNode = function(id) {
  this.type = "DATA";
  this.id = id;
};

AST.StringNode = function(string) {
  this.type = "STRING";
  this.original =
    this.string =
    this.stringModeValue = string;
};

AST.IntegerNode = function(integer) {
  this.type = "INTEGER";
  this.original =
    this.integer = integer;
  this.stringModeValue = Number(integer);
};

AST.BooleanNode = function(bool) {
  this.type = "BOOLEAN";
  this.bool = bool;
  this.stringModeValue = bool === "true";
};

AST.CommentNode = function(comment) {
  this.type = "comment";
  this.comment = comment;
};

parser.yy = AST



// src/tpl/mock4tpl.js


Mock4Tpl.debug = false
/*
    Mock4Tpl.mock(input)
    Mock4Tpl.mock(input, options)
    Mock4Tpl.mock(input, options, helpers)
*/
Mock4Tpl.mock = function(input, options, helpers) {
    return Mock4Tpl.gen(input, options, helpers)
}

/*
    Mock4Tpl.gen(input)
    Mock4Tpl.gen(input, options)
    Mock4Tpl.gen(input, options, helpers)

    Mock4Tpl.gen(ast)
    Mock4Tpl.gen(node, result)
    Mock4Tpl.gen(node, result, options)
    Mock4Tpl.gen(node, result, options, helpers)
 */
Mock4Tpl.gen = function(node, result, options, helpers) {
    if (Util.isString(node)) {
        var ast = Parser.parse(node)
        var data = Mock4Tpl.gen(ast, null, result, options)
        return data
    }

    result = result || {}
    options = options || {}

    if (Mock4Tpl.debug) {
        console.group('[' + node.type + ']', JSON.stringify(node))
        console.log('[result]', result)
        console.log('[options]', options)
    }

    this[node.type](node, result, options, helpers)

    if (Mock4Tpl.debug) {
        console.log('[result]', JSON.stringify(result))
        console.groupEnd()
    }

    return result
}


/*
    name    字符串，属性名
    options 字符串或对象，数据模板
    result  父节点
    def     默认值
*/
Mock4Tpl.val = function(name, options, result, def) {
    if (def) def = Mock.mock(def)
    if (options) {
        var mocked = Mock.mock(options)
        if (Util.isString(mocked)) return mocked
        if (name in mocked) {
            return mocked[name]
        }
    }
    if (Util.isArray(result)) return {}
    return def || (name) || Random.word()
}


/*
    AST
*/
Mock4Tpl.program = function(node, result, options, helpers) {
    for (var i = 0; i < node.statements.length; i++) {
        this.gen(node.statements[i], result, options, helpers)
    }
    // TODO node.inverse
}
Mock4Tpl.mustache = function(node, result, options, helpers) { // string id params
    var i, len, cur, prev, type, def, val, preOptions, parts;
    if (Util.type(result) === 'array') {
        result.push({})
        result = result[result.length - 1]
    }

    // "isHelper": 1
    if (node.isHelper || helpers && helpers[node.id.string]) {
        // node.params
        if (node.params.length === 0) {
            // TODO test_helper_this_with_register_and_holder
        } else {
            for (i = 0; i < node.params.length; i++) {
                this.gen(node.params[i], result, options, helpers)
            }
        }
        // node.hash
        if (node.hash) this.gen(node.hash, result, options, helpers)
    } else {
        // @index TODO 放到 DATA 中
        if (node.id.type === 'DATA') return

        // node.id.parts
        parts = node.id.parts
        if (!parts.length) {
            // TODO 修正父节点的类型
        } else {
            for (i = 0, len = parts.length; i < len; i++) {
                cur = parts[i]
                prev = parts[i - 1]
                preOptions = options[prev]

                def = i === len - 1 ? result[cur] || undefined : {}
                val = this.val(cur, preOptions && preOptions[cur] ? preOptions : options, result, def)

                // if (cur in result && (Util.type(val) === Util.type(result[cur]))) continue

                type = Util.type(val)
                result[cur] = i < len - 1 && type !== 'object' && type !== 'array' ? {} :
                    type === 'array' ? [] :
                    val

                type = Util.type(result[cur])
                if (type === 'object' || type === 'array') result = result[cur]
            }
        }
    }


}
Mock4Tpl.partial = function() {}
Mock4Tpl.block = function(node, result, options, helpers) { // mustache program inverse
    var mustache = node.mustache,
        parts = mustache.id.parts,
        i, j, len, cur, val, params, param, def, type;

    if (node.inverse) {
        // TODO 
    }

    // block.mustache
    if (mustache.isHelper) {
        // helper: each if unless with log
        switch (parts[0]) {
            case 'each':
                params = mustache.params[0].parts
                for (i = 0; i < params.length; i++) {
                    cur = params[i]
                    def = i === params.length - 1 ? [] : {}

                    val = this.val(cur, options, result, def)

                    result[cur] = Util.isArray(val) && [] || val

                    type = Util.type(result[cur])
                    if (type === 'object' || type === 'array') result = result[cur]
                }
                break
            case 'if':
            case 'unless':
                for (i = 0; i < mustache.params.length; i++) {
                    param = mustache.params[i]
                    parts = param.parts
                    for (j = 0; j < parts.length; j++) {
                        cur = parts[j]
                        def = j === parts.length - 1 ? '@BOOL(3,1,true)' : {}

                        val = this.val(cur, options, result, def)
                        if (j === parts.length - 1) {
                            val = val === 'true' ? true :
                                val === 'false' ? false : val
                        }

                        result[cur] = Util.isArray(val) ? [] : val

                        type = Util.type(result[cur])
                        if (type === 'object' || type === 'array') result = result[cur]
                    }
                }
                break
            case 'with':
                params = mustache.params[0].parts
                for (i = 0; i < params.length; i++) {
                    cur = params[i]
                    def = {}
                    val = this.val(cur, options, result, def)
                    result = result[cur] = val
                }
                break
            case 'log': // {{log "Look at me!"}}
                break
            default:
                // custom helper
                params = mustache.params[0].parts
                for (i = 0; i < params.length; i++) {
                    cur = params[i]
                    def = i === params.length - 1 ? [] : {}

                    val = this.val(cur, options, result, def)

                    result[cur] = Util.isArray(val) && [] || val

                    type = Util.type(result[cur])
                    if (type === 'object' || type === 'array') result = result[cur]
                }
                // result = result[expression] = {}
        }
    } else {
        for (i = 0; i < parts.length; i++) {
            cur = parts[i]

            val = this.val(cur, options, result, {})
            result[cur] = Util.isArray(val) && [] || val

            type = Util.type(result[cur])
            if (type === 'object' || type === 'array') result = result[cur]
        }
    }
    // block.program
    if (!node.program) return
    if (Util.type(result) === 'array') {
        // val = this.val(cur, options, result)
        len = val.length || Random.integer(3, 7)
        for (i = 0; i < len; i++) {
            if (val[i]) result.push(val[i])
            else result.push({})
            this.gen(node.program, result[result.length - 1], options, helpers)
        }
    } else this.gen(node.program, result, options, helpers)
}
Mock4Tpl.content = function() {}
Mock4Tpl.hash = function(node, result, options, helpers) {
    var pairs = node.pairs,
        pair, i, j;
    for (i = 0; i < pairs.length; i++) {
        pair = pairs[i]
        for (j = 1; j < pair.length; j++) {
            this.gen(pair[j], result, options, helpers)
        }
    }
}
Mock4Tpl.ID = function(node, result, options) { // , helpers
    var parts = node.parts,
        i, cur, def, val, type;
    for (i = 0; i < parts.length; i++) {
        cur = parts[i]

        def = i < parts.length - 1 ? {} : undefined
        val = this.val(cur, options, result, def)

        // 已有值
        type = Util.type(result[cur])
        if (type === 'undefined' ||
            i < parts.length - 1 && type !== 'undefined' && type !== 'object' && type !== 'array') {
            result[cur] = Util.isArray(val) && [] || val
        }

        type = Util.type(val)
        if (type === 'object' || type === 'array') result = result[cur]
    }
}
Mock4Tpl.PARTIAL_NAME = function() {}
Mock4Tpl.DATA = function() {}
Mock4Tpl.STRING = function() {}
Mock4Tpl.INTEGER = function() {}
Mock4Tpl.BOOLEAN = function() {}
Mock4Tpl.comment = function() {}


// src/tpl/expose.js
/*
	Expose Internal API
*/
Mock4Tpl.Parser = parser
Mock4Tpl.AST = AST

/*
    For Module Loader
*/
if (typeof module === 'object' && module.exports) {
	// CommonJS
	module.exports = Mock4Tpl;

} else if (typeof define === "function" && define.amd) {
	// AMD modules
	define(function() {
		return Mock4Tpl;
	});

} else {
	// other, i.e. browser
	this.Mock4Tpl = Mock4Tpl;
}

// for KISSY
if (typeof KISSY != 'undefined') {
	KISSY.add('mock4tpl', function() {
		return Mock4Tpl
	}, {
		requires: ['mock']
	})
}

// src/tpl/mock4tpl-suffix.js
}).call(this);
